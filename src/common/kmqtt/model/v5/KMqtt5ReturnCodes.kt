package common.kmqtt.model.v5

import common.kmqtt.model.v.QoSLevel

enum class KMqtt5ReturnCodes(val code: Int) {
    MQTT_RC_SUCCESS(0),						/* CONNACK, PUBACK, PUBREC, PUBREL, PUBCOMP, UNSUBACK, AUTH */
    MQTT_RC_NORMAL_DISCONNECTION(0),			/* DISCONNECT */
    MQTT_RC_GRANTED_QOS0(0),					/* SUBACK */
    MQTT_RC_GRANTED_QOS1(1),					/* SUBACK */
    MQTT_RC_GRANTED_QOS2(2),					/* SUBACK */
    MQTT_RC_DISCONNECT_WITH_WILL_MSG(4),		/* DISCONNECT */
    MQTT_RC_NO_MATCHING_SUBSCRIBERS(16),		/* PUBACK, PUBREC */
    MQTT_RC_NO_SUBSCRIPTION_EXISTED(17),		/* UNSUBACK */
    MQTT_RC_CONTINUE_AUTHENTICATION(24),		/* AUTH */
    MQTT_RC_REAUTHENTICATE(25),				/* AUTH */

    MQTT_RC_UNSPECIFIED(128),					/* CONNACK, PUBACK, PUBREC, SUBACK, UNSUBACK, DISCONNECT */
    MQTT_RC_MALFORMED_PACKET(129),				/* CONNACK, DISCONNECT */
    MQTT_RC_PROTOCOL_ERROR(130),				/* DISCONNECT */
    MQTT_RC_IMPLEMENTATION_SPECIFIC(131),		/* CONNACK, PUBACK, PUBREC, SUBACK, UNSUBACK, DISCONNECT */
    MQTT_RC_UNSUPPORTED_PROTOCOL_VERSION(132),	/* CONNACK */
    MQTT_RC_CLIENTID_NOT_VALID(133),			/* CONNACK */
    MQTT_RC_BAD_USERNAME_OR_PASSWORD(134),		/* CONNACK */
    MQTT_RC_NOT_AUTHORIZED(135),				/* CONNACK, PUBACK, PUBREC, SUBACK, UNSUBACK, DISCONNECT */
    MQTT_RC_SERVER_UNAVAILABLE(136),			/* CONNACK */
    MQTT_RC_SERVER_BUSY(137),					/* CONNACK, DISCONNECT */
    MQTT_RC_BANNED(138),						/* CONNACK */
    MQTT_RC_SERVER_SHUTTING_DOWN(139),			/* DISCONNECT */
    MQTT_RC_BAD_AUTHENTICATION_METHOD(140),	/* CONNACK */
    MQTT_RC_KEEP_ALIVE_TIMEOUT(141),			/* DISCONNECT */
    MQTT_RC_SESSION_TAKEN_OVER(142),			/* DISCONNECT */
    MQTT_RC_TOPIC_FILTER_INVALID(143),			/* SUBACK, UNSUBACK, DISCONNECT */
    MQTT_RC_TOPIC_NAME_INVALID(144),			/* CONNACK, PUBACK, PUBREC, DISCONNECT */
    MQTT_RC_PACKET_ID_IN_USE(145),				/* PUBACK, SUBACK, UNSUBACK */
    MQTT_RC_PACKET_ID_NOT_FOUND(146),			/* PUBREL, PUBCOMP */
    MQTT_RC_RECEIVE_MAXIMUM_EXCEEDED(147),		/* DISCONNECT */
    MQTT_RC_TOPIC_ALIAS_INVALID(148),			/* DISCONNECT */
    MQTT_RC_PACKET_TOO_LARGE(149),				/* CONNACK, PUBACK, PUBREC, DISCONNECT */
    MQTT_RC_MESSAGE_RATE_TOO_HIGH(150),		/* DISCONNECT */
    MQTT_RC_QUOTA_EXCEEDED(151),				/* PUBACK, PUBREC, SUBACK, DISCONNECT */
    MQTT_RC_ADMINISTRATIVE_ACTION(152),		/* DISCONNECT */
    MQTT_RC_PAYLOAD_FORMAT_INVALID(153),		/* CONNACK, PUBACK, PUBREC, DISCONNECT */
    MQTT_RC_RETAIN_NOT_SUPPORTED(154),			/* CONNACK, DISCONNECT */
    MQTT_RC_QOS_NOT_SUPPORTED(155),			/* CONNACK, DISCONNECT */
    MQTT_RC_USE_ANOTHER_SERVER(156),			/* CONNACK, DISCONNECT */
    MQTT_RC_SERVER_MOVED(157),					/* CONNACK, DISCONNECT */
    MQTT_RC_SHARED_SUBS_NOT_SUPPORTED(158),	/* SUBACK, DISCONNECT */
    MQTT_RC_CONNECTION_RATE_EXCEEDED(159),		/* CONNACK, DISCONNECT */
    MQTT_RC_MAXIMUM_CONNECT_TIME(160),			/* DISCONNECT */
    MQTT_RC_SUBSCRIPTION_IDS_NOT_SUPPORTED(161), /* SUBACK, DISCONNECT */
    MQTT_RC_WILDCARD_SUBS_NOT_SUPPORTED(162);	/* SUBACK, DISCONNECT */

    companion object {
        fun fromCode(code: Int) = values().first { it.code == code }

        fun toValue(value : Int) = QoSLevel.values().first { it.value == value }
    }
}
